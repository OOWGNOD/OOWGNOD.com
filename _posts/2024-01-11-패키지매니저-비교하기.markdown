# node packge와 yarn , yarn berry 등 패키지 매니저 비교

# node_modules

![node_modules](../assets/images/node_modules.png)

## 블랙홀보다 더 깊은 node_modules

한 번이라도 React.js,vue.js등으로 프로젝트를 생성해본 사람들은 `node_modules`라는 이름의 디렉토리를 마주하게 됩니다. 해당 디렉토리는 npm,yarn 등을 통해 프로젝트를 생성하게 되면 생겨나는데,

해당 디렉토리 안에는 현 프로젝트의 모든 모듈들이 존재하며, 모든 모듈에 대한 정보들은 package.json이라는 파일에 저장됩니다. 

`node_modules`폴더는 패키지 매니저를 통해 자동으로 관리되게 되는데, 오늘은 패키지 매니저 중 대표적인 npm과 yarn에 대해서 알아보겠습니다.

---

# npm이란?

> npm(node package manager)

자바스크립트 언어를 위한 패키지 관리자이며, 자바스크립트 런타임 환경 Node.js 의 기본 패키지 관리자입니다. 약 320만 개 이상의 라이브러리를 호스팅 해준다고 하며, Node.js를 설치하면 자동으로 설치됩니다.
> 

npm을 사용하여 전 세계의 개발자들이 JS로 만든 다양한 패키지를 npm 온라인 DB에 올리고 사용자들은 이러한 패키지 관리자를 통해 설치 및 삭제 뿐만 아니라 CLI를 통해 패키지 버전 관리, 의존성 관리 또한 가능합니다. 

npm과 비슷한 기능을 가진 오픈 소스 대안들은 ied, pnpm, npmd , Yarn 등이 있습니다.

---

## npm의 주요 명령어

프로젝트를 진행하면 무조건적으로 npm 등을 이용하여 패키지를 설치 받아 사용하게 되는데, 패키지 매니저를 사용 할 때는 그 패키지 매니저에 맞는 명령어를 사용해주어야 합니다. 

npm의 명령어들은 아래와 같습니다.

| npm | 의미 |
| --- | --- |
| npm install | npm i 로 축약 가능하다.<br>  package.json 파일의 dependencies 항목에 자동으로 추가 된다. <br>  해당 파일이 없을 경우 자동으로 추가된다. |
| npm install [package] | npm i [package@version] 으로 지정한 버전 설치가 가능하다 <br> npm i 주소로 패키지 설치 주소를 지정하여 설치 가능하다. <br> npm i [package1] [package2] [package3] … 여러 개의 패키지를 동시에 설치 가능하다.  |
| npm install —save-dev [package]| npm i -D [package] 으로 축약 가능하다. <br> package.json 파일의 devDependencies 항목에 추가되도록 설치한다. |
| npm uninstall [package]| npm rm [package] 으로 축약 가능하다. <br> node_modules 폴더에 설치된 패키지를 삭제한다. <br> package.json dependencies 항목에서도 제거된다.  |
| npm uninstall —save-dev [package] |  |
| npm install —global [package] | npm i -g 으로 축약 가능하다. <br> npm 자체가 설치되어 있는 폴더에 패키지를 설치하여 어디 서나 참조할 수 있게 한다. <br> * 맥, 리눅스의 경우 권한 문제가 있어 sudo 를 붙여 sudo npm install -g [packge]으로 설치해야 한다.  |
| npm uninstall —global [package] |  |
| npm -version | npm -v 으로 축약 가능하다. <br> npm 자체 버전을 체크 할 때 사용한다. |
| npm install -g npm | npm 자체의 버전을 업그레이드 할 때 사용한다. <br>* 맥, 리눅스의 경우 권한 문제가 있어, sudo 를 붙여 sudo i -g npm 으로 설치해야 한다. |
| npm info [package]  | 패키지의 살세 정보를 파악할 때 사용한다. |
| npm search [package or package info] | npm 서버의 패키지를 검색 할 때 사용한다. |
| npm help <br>npm 명령어 help  | 명령어 목록을 확인 할 때 사용한다. <br>해당 명령어에 대한 설명 및 정보를 확인 할 때 사용한다. |
| npm ls<br>npm ls [package]<br>npm ll | 설치된 패키지들의 구조를 보여준다.<br>해당 패키지와 관련된 구조만을 보여준다.<br>더 상세한 패키지 구조를 보여준다. |

### **단축 플래그**

| 명령어 | 단축 플래그 | 의미 |
| --- | --- | --- |
| global | -g | 전역 설치 |
| install | i | 설치 |
| uninstall | uni | 삭제 |
| —save-dev | -D | devDependencies 에 추가 |
| —save-exact | -E | ^, ~대신 정확한 버전으로 설치 |
| —save-optional | -O | optionalDependencies에 추가 (선택정 의존성 모듈) |

### **기타 명령어**

| 명령어 | 의미 |
| --- | --- |
| npm update jquery | ^ : Minor Level 범위에서 가장 최신 버전으로 업데이트<br>~ : Patch Level 범위에서 가장 최신 버전으로 업데이트 |
| ls | 패키지 목록 |
| npm i 모듈명@n.n.n | 특정 버전 설치 |
| npm i 모듈명@latest | 최신 버전 설치 |
| npm outdated | 설치된 패키지 버전 확인 |

---

## npx?

프로젝트를 생성 할 떄 npm 명령어가 아닌 `npx`를 사용하여 프로젝트를 생성해본 경험이 있을 겁니다.

`npx`는 패키지를 한번 실행하는 것이라고 생각하면 쉽습니다. *(npm을 execute한다)*

단점으로는 해당 패키지가 설치되어있지 않은 경우에는 실행할 때 마다 다운로드 받아서 사용하기 때문에 느리지만, 이미 로컬,글로벌에 해당 패키지가 설치되어 있다면 설치되어있는 해당 패키지를 실행하고 없을 경우 원격 npm(remote)에서 찾아서 실행 후 삭제 합니다.

- 로컬 → 글로벌 → npm(remote) 순으로 찾아서 실행

또한 npx는 해당 패키지가 설치되어있지 않을 경우 remote에 있는 최신 버전 만을 가져와 실행하기 때문에 create-react-app과 같은 보일러 플레이트 모듈을 설치하는데 효과적이라는 장점이 있습니다.

---

## npm의 문제점

![glitch_npm](../assets/images/glitch_npm.png)

> *최근에는 기존에 있던 대부분의 문제를 해결하고 Yarn의 장점을 모두 흡수하여 가장 대중적인 패키지 매니저로 자리 잡아 가고 있습니다.
최소한 npm v6 이상을 쓰는 것을 추천합니다.*
> 

yarn이 등장하기 이전 npm의 문제점은 일관적이지 않은 패키지 버전, 고정되지 않은 설치 순서, 순차적인 설치로 인한 긴 소요 시간 등의 불편점부터 심각한 오류를 일으킬 수 있는 요소까지 다양한 문제점이 있었습니다. 

---

### 일관적이지 않은 패키지 버전

노드 모듈들은 기본적으로 “시멘틱 버저닝”이라는 기법을 사용하여 모듈 버전을 나타낼 것을 권장한다. “시멘틱 버저닝”이란 1.2.3 처럼 버전을 세 가지 숫자의 자리로 구분하고 각각의 자리에 현재 버전이 이전 버전과의 관계를 나타내도록 암시하는 방법이다. 첫 예를 들어 첫 번째 자리에 숫자가 다른 두 버전은 서로 호환되지 않는 완전한 새로운 버전을 의미한다. 두 번째 자리는 마이너, 세번째 자리는 패치 버전을 의미한다. 이 방식은 호환 버전을 쉽게 알 수 있다는 장점을 가짐과 동시에 단점 또한 존재한다. 자신의 프로젝트의 `package.json`을 살펴보면 버전 앞에  캐럿 기호(^)가 들어가 있는 걸 볼 수 있는데, 이는 가장 앞 숫자인 메이저 버전을 제외한 두 자리 버전까지는 변경을 허용한다는 의미이다. npm install 을 통해 모듈들을 설치하면 해당 메이저 버전 중 가장 최신 버전을 다운 받게 되는데, 빌드에 따라 유연하게 버전을 선택한다는 장점이 있지만, 사용하는 모듈간의 버전 불일치로 인해 문제가 발생한다.

### 고정되지 않은 설치 순서

개발자의 환경에 따라 모듈들의 설치 순서가 변경됩니다.

만들어진 프로젝트에서 모듈을 추가로 설치하게 될 경우, 그 뒤에 `npm i`명령어를 통해 처음부터 설치하는 사람과 모듈 설치 순서가 달라질 수 있습니다. npm은 모듈 이름을 사전 순서대로 정렬하여 순차적으로 설치하기 때문입니다. 서로 다른 환경이 만들어지기 때문에 좋은 징조라고 보기 어렵습니다.

### 순차적인 설치로 인한 긴 소요시간

npm은 모듈들을 한 번에 하나씩만 순차적으로 설치합니다. 설치해야하는 모듈이 많으면 많을수록, 총 설치 시간이 길어지게 됩니다. 첫 모듈 설치 시간이 길어지면 빌드 및 배포 시간에도 부정적인 영향을 끼치게 됩니다.

---

## 이외 문제에 대한 사건

*(일부 나무위키 퍼옴)*

### 1. left-pad 사건

npmjs.com에 등록된 패키지 하나가 삭제된 것으로 인해 수많은 IT 회사의 업무가 마비된 사건입니다.

이 패키지는 코드가 11줄에 불과한 작은 라이브러리에 불과했고, 문자열에 특정 문자를 추가해주는 기능이 있습니다.

```js
module.exports = leftpad;
    function leftpad (str, len, ch) {
    str = String(str);
    var i = -1;
    if (!ch && ch !== 0) ch = '';
    len = len - str.length;
    while (++i < len) {
        str = ch + str;
    }
    return str;
}
```

그러나 다른 개발자가 제작한 line-numbers라는 패키지가 left-pad를 불러와 쓰고 있었고, 다시 이 line-numbers는 '바벨(babel)'이라는 패키지가 불러와 쓰고 있었다. npm(프로그램)은 이렇게 의존 관계에 있는 패키지를 자동으로 불러와 설치하기 때문에, 바벨을 쓰는 개발자들은 자신도 모르는 사이에 left-pad를 함께 설치하고 있었습니다. 

당연히 left-pad가 삭제되자 바벨 또한 설치가 불가능해졌다.문제는 바벨은 JavaScript 개발에 반쯤 필수적으로 쓰이는 인기 패키지였다는 것입니다.

페이스북, 링크드인, 스포티파이 등 이름난 IT 기업부터 전세계의 수많은 1인 개발자까지 많은 사람들이 바벨을 사용하고 있었습니다. 

left-pad가 삭제되자 이들의 업무가 모두 마비되었고, 사람들이 원인을 분석하면서 left-pad 사건이 널리 알려지게 되었다.npm은 예상치 못한 상황에 당황했고, 우선 left-pad를 임시로 복구하여 설치할 수 있게 만들어서 문제를 해결했습니다. 

이후 npm은 사과문을 공개하였으며, 앞으로 똑같은 문제가 발생하지 않도록 공개된 지 24시간이 지난 프로젝트는 소유자가 임의로 삭제할 수 없도록 규정을 변경했습니다. 

한편 바벨의 개발진은 line-numbers를 호출하는 코드를 지우고 필요한 기능을 직접 추가하는 방식으로 문제를 해결했습니다.

이 사건의 의의는 npm의 미흡한 운영 방식이 드러난 것 외에도, npm을 비롯한 JavaScript 생태계의 취약점이 드러났다는 것입니다.

 JavaScript는 다른 프로그래밍 언어에 비해 내장된 API가 부실하기 때문에, 다른 언어라면 표준 라이브러리에서 제공할 법한 기능도 직접 코드를 짜거나 다른 사람이 만든 라이브러리를 가져와 사용해야 합니다. 

여기에 JavaScript를 많은 사람이 사용한다는 점과, npm에 패키지를 등록하는 것이 쉽다는 점이 맞물려서 비교적 단순한 기능도 직접 구현하기보다는 npm에 공개된 패키지를 설치하는 것이 관습화되었습니다. 

이 때문에 패키지 A가 B를 불러오고, B가 C를 불러오고...하는 식으로 의존 관계가 여러 겹 쌓이다 보니 개발자들은 자신이 어떤 패키지를 설치했는지도 파악하기 어렵게 되었습니다. 

게다가 패키지 하나에 문제가 생기면 여기에 의존하는 수많은 패키지가 영향을 받으니 보안 면에서 취약할 수밖에 없다. 이 문제는 JavaScript가 눈부신 발전을 거듭한 2020년대에도 여전히 JavaScript의 아킬레스건으로 지적받고 있습니다.

---

### 2. everything 사건

![Untitled](../assets/images/npm_everything.png)
[everything 체험해보기](https://everything.npm.lol/)

**everything** 이라는 라이브러리로 인해 문제가 발생했던 사건을 이야기합니다. 이 사건의 발단은 “npm에 있는 모든 라이브러리를 설치하면 어떨까”라는 상상에서 시작되었습니다. 

그렇게 탄생한 everything은 npm에 업로드 되어있는 모든 라이브러리에 의존하며 용량은 약 20TB에 육박하였습니다. 

하지만 npm은 하나의 라이브러리가 최대800개의 라이브러리만 참조하도록 하는 규칙이 있었는데, 해당 라이브러리는 설치 시 5개의 라이브러리를 설치하도록 하고 그 라이브러리들이 각각 800개씩 라이브러리들을 참조 하도록 만들어 해당 규칙을 회피했습니다.  (위 사진을 참고 해주세요)

이렇게만 해도 5 * 800 개의  라이브러리를 참조하게 되는데, 이 과정을 한 번 더 반복하도록 하여 800개의 라이브러리들이 다시 800개의 라이브러리들을 참조하도록 만들어 5 * 800 * 800 개의 라이브러리들을 설치하도록 만들었습니다.

 
해당 라이브러리로 인해 모든 라이브러리들이 이 라이브러리와 참조하는 관계가 되어 npm에서 모든 라이브러리들을 삭제 할 수 없는 일이 벌어지게 되는데 
“everything이라는 라이브러리를 삭제하면 해결될 일 아닌가”라는 생각이 들지만 everything 또한 everything을 순환참조하고 있어 해당 라이브러리 조차 삭제할 수 없게 되었습니다.
결국 해당 라이브러리 제작자가 npm에 직접 삭제 요청을 하게 되었던 사건입니다.

npm은 설치 할 때 package.json에 dependencies 의 적힌 버전을 참고하여 해당 라이브러리를 설치하는데 everything 라이브러리는 dependencies에 ”^17.0.0“ 등의 버전이 아닌, “*”이 적혀있었습니다.
dependencies에서 “*”은 모든 버전을 다운로드 한다는 의미인데… package.json 관한 설명은 아래에서 다시 알아보겠습니다.

---

# yarn이란?

> *yarn 은 2016년 10월에 출시되었다. facebook에 근무하던 Sebastian McKenzie가 개발한 패키지 매니저입니다. 기존의 npm이 가지고 있던 문제점들을 해결하기 위해 등장하였습니다.*

Lock 파일: Yarn은 yarn.lock 파일을 사용하여 프로젝트 의존성을 정확하게 관리합니다. 그래서 프로젝트를 다른 환경에서 빌드할 때 버전 충돌을 방지할 수 있습니다.

병렬 설치: Yarn은 의존성을 병렬로 설치하여 더 빠른 설치 속도를 제공합니다.

캐시 기능: Yarn은 이전에 설치한 패키지를 캐시 하여, 같은 패키지를 다시 설치할 필요가 없도록 도와줍니다.
> 

## yarn의 주요 명령어

| yarn | 의미 |
| --- | --- |
| yarn init | 초기화 |
| yarn 또는 yarn install | package.json의 패키지 설치 |
| yarn add [package] | 의존성으로 추가 |
| yarn add —dev [package] | 개발 의존성으로 추가 |
| yarn global add [package] | 전역으로 추가 |
| yarn upgrade | 패키지 업데이트 |
| yarn [script] | package.json의 스크립트 명령 실행 |
| yarn remove [package] | 패키지 삭제 |
| yarn cache clean | 캐시 삭제 |

## yarn을 만든 facebook은 아래와 같이 설명했습니다.

- Ultra Fast(고속)다운로드한 모든 패키지를 캐시하므로 다시 다운로드할 필요가 없습니다. 또한 운영을 병렬화하여 리소스 활용률을 극대화하므로 설치 시간이 그 어느 때보다 단축됩니다.
- Mega Secure(보안)체크섬을 사용하여 코드가 실행되기 전에 설치된 모든 패키지의 무결성을 확인합니다.
- Super Reliable(신뢰성)상세하고 간결하며 잠금 파일 형식과 설치용 결정 알고리즘을 사용하여 한 시스템에서 작동하는 설치가 다른 시스템에서 정확히 동일한 방식으로 작동하도록 보장할 수 있습니다.

또한

- Offline Mode(오프라인모드)이전에 패키지를 설치한 경우 인터넷 연결 없이 패키지를 다시 설치할 수 있습니다.
- Deterministic(결정적)설치 순서와 관계없이 모든 시스템에 동일한 종속성이 동일한 방식으로 설치됩니다.
- Network Performance(네트워크 성능)네트워크 활용도를 극대화하기 위해 요청을 효율적으로 대기열에 올리고 요청 폭포를 방지합니다.
- Same Packages(동일 패키지)npm의 패키지를 설치하고 패키지 workflow를 동일하게 유지합니다.
- Network Resilience(네트워크 복구)요청 실패 한 번으로 인해 설치에 실패하지 않습니다. 실패 시 요청이 재시도됩니다.
- Flat Mode(플랫 모드)중복 항목을 생성하지 않으려면 일치하지 않는 버전의 종속성을 단일 버전으로 해결합니다.

---

# npm과 yarn

![npm_vs_yarn](../assets/images/npm_vs_yarn.png)

## npm과 yarn의 공통 명령어

| npm | yarn | 의미 |
| --- | --- | --- |
| npm init | yarn init | 초기화 |
| npm install | yarn 또는 yarn install | package.json의 패키지 설치 |
| npm install —save [package] | yarn add [package] | 의존성으로 추가 |
| npm install —save-dev [package] | yarn add —dev [package] | 개발 의존성으로 추가 |
| npm install —global [package] | yarn global add [package] | 전역으로 추가 |
| npm update —save | yarn upgrade | 패키지 업데이트 |
| npm run [script] | yarn [script] | package.json의 스크립트 명령 실행 |
| npm uninstall —save [package] | yarn remove [package] | 패키지 삭제 |
| npm cache clean | yarn cache clean | 캐시 삭제 |

## 두 패키지 매니저 간의 비교 (npm vs yarn)

두 패키지 매니저 사이의 가장 큰 차이점은 다음과 같다.

- `npm` : **Node**를 설치하면 **자동으로 설치된다.**
- `yarn` : **npm 을 설치하고 yarn을 설치해야한다.**

npm 버전이 올라감에 따라서 yarn과 거의 동등한 성능 차이를 보여주게 되며 큰 차이가 없어지게 되었다. 하지만 두 패키지 매니저의 공통된 문제점은 존재한다.

### 1. 저장 공간과 설치 시간

node_modules 디렉터리는 흔히 매우 큰 공간을 필요로 하고, 그만큼 설치에도 오랜 시간이 걸립니다.

### 2. 유령 의존성

npm 및 yarn v1에서는 중복해서 설치되는 node_modules를 아끼기 위해 호이스팅 기법을 사용합니다.

![package-tree](../assets/images/package_tree.png)

<div style="display: flex; align-items: center;">
  <div style="flex: 1;">
    예를 들어, 의존성 트리가 왼쪽의 모습을 하고 있다고 가정한다면,

왼쪽 트리에서 **[A (1.0)]**과 **[B (1.0)]** 패키지는 두 번 설치되므로 디스크 공감을 낭비하게 됩니다. npm과 yarn v1에서는 디스크 공간을 아끼기 위해 원래 트리의 모양을 오른쪽의 모양으로 바꿉니다.

오른쪽 트리로 의존성 트리가 바뀌면서 package-1 에서는 원래 `require()` 할 수 없던 **[B (1.0]**라이브러리를 불러올 수 있게 되었습니다. 

이렇게 되면 프로젝트가 의존하고 있는 패키지의 내부에 존재하던 각각의 `node_modules`에 있는 중복된 패키지가 최상단에 하나만 존재하게 되어 불필요한 중복을 제거할 수 있게 됩니다.

하지만 직접 설치하지 않고, 간접 설치한 종속성에 개발자가 접근할 수 있게 되는 상황이 벌어지기도 합니다. 존재하지 않는 종속성에 의존하는 코드가 발생할 수 있다는 뜻입니다. 이를 `유령 의존성`이라고 합니다.

내가 설치한 패키지가 의존하고 있다는 이유로 그 패키지까지 슬쩍 불러올 수 있게 됩니다. 마치 유령처럼 나는 설치한 적이 없지만, 그 패키지는 최상단에 존재 하고 있습니다. 이러한 현상을 `유령 의존성`이라고 부릅니다.
  </div>
  <div style="flex: 1; text-align: center;">
    <img src="../assets/images/npm_ghost.png" alt="npm_ghost">
  </div>
</div>




### 3. 의존성 탐색 알고리즘의 비 효율

node.js에서 `require()` 함수를 실행하면 모듈을 찾을 때까지 상위 `node_modules` 디렉터리를 순회한다. 이때 [느린 디스크 I/O 동작](https://github.com/nodejs/node/blob/24fc302eadf64d2518733a2ae40355916e6990f7/lib/internal/modules/cjs/loader.js#L321-L336)이 경로의 깊이만큼 발생한다.


✏️ `require()`의 경우
```
1) fs, http 등의 코어 모듈이 아니면서,
2) 절대 경로를 사용할 경우 대략 아래와 같은 순서로
순회하며 모듈을 검색합니다.
```

매 탐색마다 수 많은 폴더와 파일을 실제로 열고 닫으면서 검색할 수 밖에 없으며, node_modules 중첩 등 경우에 따라서는 순회해야 하는 경로가 이보다 복잡해질 수 있습니다.

모듈 탐색을 메모리 상에서 자료구조로 처리하지 않고 I/O로 직접 처리 하다 보니 추가적인 최적화가 어렵습니다.

---

## 공통 속성

```jsx
name: 프로젝트 이름
version: 프로젝트의 현재 버전
private: true 로 설정하면 패키지가 실수로 npm에 게시되는 것을 방지
description: 프로젝트에 대한 간략한 설명
main: 프로젝트의 진입점(라이브러리에서 일반적으로 사용됨)
scripts: 명령 단축키가 포함된 개체
// 예를 들어 Create React App 프로젝트에서 개발 서버를 실행하려면
// "start": "react-scripts start"
dependencies: 프로젝트가 프로덕션에서 의존하는 라이브러리 및 도구
devDependency: 개발에만 필요한 라이브러리 및 도구(ex. 테스트 프레임워크)
peerDependency: 환경 또는 라이브러리 사용자가 제공할 것으로 예상되는 라이브러리
homepage: homepage 속성은 프로젝트의 공식 홈페이지나 문서, GitHub 저장소 페이지 등을 가리킬 수 있다.
// 이 URL은 npm 웹사이트에서 해당 패키지의 페이지를 방문할 때 "homepage" 링크로 사용된다.
// (혹은 CRA에서의 상대 경로로 사용될 수 있다.)
```

### dependencies & devDependencies

> package.json 파일 내에서 dependencies와 devDependencies 섹션은 프로젝트의 외부 의존성을 명시합니다.
>>  dependency(의존성)는 소프트웨어 개발에서 특정 코드나 모듈이 다른 코드나 모듈에 의존하는 관계를 의미합니다.
>  Node.js와 JavaScript의 생태계에서 이러한 의존성은 대게 외부 라이브러리나 프레임워크 형태로 존재합니다.

### dependencies

- 프로젝트가 실행될 때 필요한 라이브러리나 패키지를 나열합니다.
- 예를 들어, 웹 서버를 만드는 Express.js 또는 프론트엔드 라이브러리인 React가 이 섹션에 포함될 수 있습니다.
- 배포된 애플리케이션에서 실행될 때 필요한 패키지를 이 섹션에 포함시킵니다.

### devDependencies

- devDependencies에 추가된 패키지는 개발 환경에서만 필요하며, 프로덕션 환경에서는 설치되지 않습니다.
- 개발 중이거나 빌드 시에만 필요한 라이브러리나 패키지를 나열합니다.
- 예를 들어, 코드 포맷터인 Prettier, 린터인 ESLint, 테스팅 라이브러리인 Jest 등이 여기에 포함될 수 있습니다.
- 배포된 애플리케이션에서는 이러한 패키지가 필요하지 않기 때문에 devDependencies에 나열합니다.

### 동작 방식

- npm install (또는 yarn install)을 실행하면, dependencies와 devDependencies에 나열된 모든 패키지가 설치됩니다.
- 프로덕션 환경에서는 `npm install --production` (또는 `yarn install --production`)을 사용하여 devDependencies에 나열된 패키지를 제외하고 dependencies에만 나열된 패키지를 설치할 수 있습니다.

---

# yarn berry

> yarn berry는 Node.js를 위한 새로운 패키지 관리 시스템으로 2020년 1월25일부터 정식버전(v2)가 출시되어, 현재는 Bable과 같은 큰 오픈소스 레포지토리에서도 채택하고 있습니다. 기존의 yarn v1은 yarn classic 이라고 부르게 되었습니다.
> 

## Plug’n’Play

Plug'n'Play는 yarn berry가 제공하는 새로운 패키지 관리 시스템입니다.

기존의 무거웠던 node_modules 대신, 패키지들에 대한 정보는`.zip`

파일로 압축하여 `.yarn/cache`

폴더에 저장하고 이를 찾기 위한 정보를`.pnp.cjs`

파일에 생성 후 의존성 트리 정보를 단일 파일에 저장합니다. 
이를 `인터페이스 링커 (Interface Linker)`라고 합니다.

### Plug'n'Play 켜기

npm에서 최신 버전의 yarn을 내려받고, 버전을 berry로 설정하면 yarn berry를 사용할 수 있습니다. 

```bash
$ npm i -g yarn
$ cd ../path/to/package
$ yarn set version berry
```

Plug'n'Play 설치모드에서 `yarn install` 로 의존성을 설치하게되면, `node_modules`를 생성하지 않는 모습을 볼 수 있습니다. 위에서 설명한 것 처럼`.yarn/cache` 폴더에 의존성의 정보가 저장되고, `.pnp.cjs` 파일에 의존성을 찾을 수 있는 정보가 기록됩니다. `.pnp.cjs`를 이용하면 디스크 I/O 없이 어떤 패키지가 어떤 라이브러리에 의존하는지, 각 라이브러리는 어디에 위치하는지를 알 수 있습니다.

아래 코드는 .pnp.cjs의 일부입니다.

```js
["@babel/helper-module-transforms", [\
  ["npm:7.19.6", {\
    "packageLocation": "./.yarn/cache/@babel-helper-module-transforms-npm-7.19.6-c73ab63519-c28692b37d.zip/node_modules/@babel/helper-module-transforms/",\
    "packageDependencies": [\
      ["@babel/helper-module-transforms", "npm:7.19.6"],\
      ["@babel/helper-environment-visitor", "npm:7.18.9"],\
      ["@babel/helper-module-imports", "npm:7.18.6"],\
      ["@babel/helper-simple-access", "npm:7.19.4"],\
      ["@babel/helper-split-export-declaration", "npm:7.18.6"],\
      ["@babel/helper-validator-identifier", "npm:7.19.1"],\
      ["@babel/template", "npm:7.18.10"],\
      ["@babel/traverse", "npm:7.19.6"],\
      ["@babel/types", "npm:7.20.2"]\
    ],\
    "linkType": "HARD"\
    }]\
  ]],\
["@babel/helper-optimise-call-expression", [\
	["npm:7.18.6", {\
      "packageLocation": "./.yarn/cache/@babel-helper-optimise-call-expression-npm-7.18.6-65705387c4-e518fe8418.zip/node_modules/@babel/helper-optimise-call-expression/",\
      "packageDependencies": [\
        ["@babel/helper-optimise-call-expression", "npm:7.18.6"],\
        ["@babel/types", "npm:7.20.2"]\
      ],\
    	"linkType": "HARD"\
  	}]\
]],\
```

위와 같이 .pnp.cjs는 의존성 트리를 중첩된 맵으로 표현하였습니다. 기존 Node 가 파일시스템에 접근하여 직접 I/O 를 실행하던 `require()`문의 비효율을 자료구조를 **메모리에 올리는 방식으로 탐색을 최적화한 것**입니다. 의존성 압축을 통하여 디스크 용량 절감 효과도 볼 수 있습니다. `du -sh` 명령어로 확인해보았을 때, Next.js 기반 어드민 서비스 기준 `913MB → 247MB` 로 기존 패키지 용량 대비 약 `27%` 수준으로 패키지 관련 용량이 감소한 것을 확인할 수 있습니다.

![module-size](../assets/images/package_yarn_berry.png)

다만`.yarnrc.yml`의 링커 설정을 PnP가 아닌 `node-modules` 로 하게 된다면 기존처럼 node_modules를 설치하여 의존성을 관리하게 됩니다. 하지만 이렇게 사용할 경우 앞서 설명드린 PnP의 장점들을 활용하지 못하게 됩니다.

이에 대한 예시로 최근 `Vercel` 에서 모노레포 툴링으로 발표한 `Turborepo` 의 경우 패키지 매니저 중 `pnpm` 의 pnp 모드만 지원하고 있고, 메인테이너는 yarn berry의 경우 지원 계획을 취소한 상태입니다. 이 경우 앞서 말씀드린 방식으로 berry를 사용해야 합니다. 관련 이슈는 [여기](https://github.com/vercel/turbo/issues/693#issuecomment-1278886166)에서 확인하실 수 있습니다.

즉, 별도의 I/O 작업 없이도 패키지의 위치를 정확히 알 수 있기 때문에 시간도 단축되고, 중복 설치를 방지하며, node_modules를 만들고 패키지들을 호이스팅시킬 필요가 없는 Plug'n'Play의 특성 덕분에 유령 의존성 문제도 해결할 수 있었습니다. 패키지를 압축한 덕분에 용량도 줄었습니다.

## ZipFS(Zip Filesystem)

![ZipFs-cache](../assets/images/yarn_berry_dirc.png)

Yarn PnP 시스템에서 각 의존성은 Zip 아카이브로 관리됩니다. 예를 들어, Recoil 0.1.2 버전은
`recoil-npm-0.1.2-9a0edbd2b9-c69105dd7d.zip`과 같은 압축 파일로 관리됩니다.

이후`.pnp.cjs` 파일이 지정하는 바에 따라 동적으로 Zip 아카이브의 내용이 참조됩니다.

Zip 아카이브로 의존성을 관리하면 다음과 같은 장점이 생깁니다.

1. node_modules 디렉토리 구조를 생성할 필요가 없기 때문에 설치가 빨라집니다. 
2. 각 패키지 버전마다 하나의 Zip 아카이브만을 가지기 때문에 중복해서 설치되지 않습니다. 각 Zip 아카이브가 압축되어 있을음 고려할 때, 스토리지 용량을 크게 아낄 수 있습니다.
3. 의존성을 구성하는 파일의 수가 많지 않으므로, 변경 사항을 감지하거나 전체 의존성을 삭제하는 작업이 빠릅니다.

## Zero install

Plug'n'Play 전략으로 무거웠던 node_modules를 획기적으로 제거하고 옮긴 덕분에 이를 이용해 의존성까지 github에 올릴 수 있게 되었습니다.

github는 파일당 최대 용량을 500mb으로 제한하고, 원활한 이용을 위해 저장소당 1gb 미만의 크기를 유지 할 것을 권장하고 있습니다.

yarn berry를 통해 만든 의존성 폴더는 어지간히 크지 않은 이상 200mb를 넘지 않습니다. 

덕분에`git clone`이후 별도의 설치가 필요 없이, 바로 사용할 수 있도록 하는 zero-install을 시도해 볼 수 있습니다.

zero-install을 사용할 경우 로컬에서의 귀찮음도 줄어들지만, CI/CD 파이프라인을 구축한 경우 더 큰 효과를 볼 수 있습니다. 클론이 끝나자마자 곧바로 빌드가 가능해진 덕분에 배포까지 걸리는 속도가 대폭 단축됩니다.

## 기업들이 yarn berry를 선택하는 이유

### Monorepo

![Monorepo](../assets/images/monorepo.png)

두 개 이상의 프로젝트 코드를 하나의 버전 관리 저장소(repository)에서 관리하는 방법을 말합니다.

### **모노레포가 왜 나왔을까?**

모노레포(mono repo) 개념이 처음 등장한 이유는 여러 가지가 있지만, 대표적인 이유 중 하나는 큰 규모의 소프트웨어 개발 프로젝트에서 발생하는 문제를 해결하기 위해서입니다.

큰 규모의 프로젝트에서는 여러 개의 코드 저장소가 생성됩니다. 표면적으로 봤을 때는 큰 문제가 없으나 다음과 같은 문제점들 때문에 프로젝트 관리에  어려움이 발생할 수 있습니다.

- **중복되는 코드**
- **서로 다른 패키지 의존성**
- **서로 의존하는 프로젝트들끼리의 리팩터링 비용**
- **코드가 저장소마다 상황이 다르기에 개발자들 사이의 협업도 어려워지는 문제**

이러한 문제를 해결하기 위해 모든 프로젝트 코드를 단일 코드 저장소에서 관리함으로써 중복을 줄이고 의존성을 관리하여 개발자의 협업과 개발 생산성을 향상하는 방법으로 등장하게 되었습니다.

### **특징**

- **단일 코드 저장소**: 모든 소스 코드를 단일 코드 저장소에 유지합니다.
- **모듈화**: 코드를 모듈화 하여 필요한 모듈만 가져와서 사용할 수 있습니다.
- **의존성 관리**: 모든 코드가 단일 코드 저장소에 있기에 의존성 문제를 빠르게 해결할 수 있습니다.
- **협업**: 모든 코드가 단일 코드 저장소에 있기에 다른 개발자들 간의 협업이 편해집니다.
- **코드 품질**: 리팩터링시 모든 프로젝트의 상황을 고려하기 때문에 코드 품질을 일관성 있게 유지할 수 있습니다.

### **단점**

- **복잡성 증가**: 여러 프로젝트를 하나의 저장소에서 관리하므로 코드 충돌 등의 문제가 발생할 가능성이 높아집니다.
- **빌드 시간 증가**: 모든 프로젝트를 함께 빌드해야 하므로 빌드시간이 증가할 수 있습니다.
- **변경 사항이 모든 프로젝트에 영향을 미침**: 하나의 프로젝트에서 발생한 변경 사항이 전체 시스템에 영향을 미칠 수 있습니다.

### Micro frontend architecture

독립적으로 제공한 프론트엔드 APP으로 더 큰 하나의 전체 APP을 구성하는 아키텍쳐 스타일

- 대규모 서비스를 개발할 때 용이하다.
- 마이크로 프론트엔드란 프론트엔드의 단일 구조를 개별적으로 개발/테스트 및 배포할 수 있는 작고 간단한 단위로 개발하는 패턴
- 전체화면을 작동할 수 있는 단위로 나누어 개발한 후 서로 조립하는 방식.
- 작동단위에 사용된 프레임워크의 종류에 상관하지않고 조합가능한 방법을 제공.
- 단일 팀에 의해 유지될정도의 작은 서비스의 경우에는 오버엔지니어링이 되지 않도록 주의한다.
